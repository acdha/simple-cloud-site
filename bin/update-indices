#!/usr/bin/env python

import sys

from lxml.html import tostring
from pyquery import PyQuery

from simple_cloud_site.files import find_recent_posts
from simple_cloud_site.html import parse_html, lxml_inner_html, tidy
from simple_cloud_site.site import load_site


def main():
    site = load_site()

    print("Updating indices under", site.base_dir)

    recent_posts = find_recent_posts(site.base_dir, count=4)

    # TODO: read template name from a config file
    template = PyQuery(parse_html("_templates/index.html").getroot())

    template.find('title').text(site.config.get('site', 'site_title'))

    post_list = template.find('.post-list').removeClass("placeholder")
    post_template = post_list.children().eq(0).clone().removeClass("placeholder")
    post_list.empty()

    for post in recent_posts:
        p = post_template.clone()

        uri = site.filename_to_url(post.filename)

        html = post.html.getroot()
        html.make_links_absolute(uri)

        p.find('a.title').removeClass('placeholder') \
            .attr('href', uri) \
            .text(post.title)

        post_date = post.get_publication_date()
        p.find('.date').removeClass('placeholder') \
            .text(post_date.strftime('%b %d')) \
            .attr("datetime", post_date.isoformat())

        summary = html.cssselect('.summary')
        if summary:
            p.find('.summary').removeClass('placeholder').html(lxml_inner_html(summary[0]).strip())
        else:
            p.find('.summary').remove()

        p.find('.body').removeClass('placeholder') \
            .html(post.articleBody)

        p.appendTo(post_list)

    orphans = template.find(".placeholder")
    if orphans:
        print("Template contained unexpanded placeholders:", orphans, file=sys.stderr)

    with open('index.html', 'wb') as f:
        # We don't use template.outerHtml because that would lose the doctype
        f.write(tostring(template[0].getroottree(), method='html', encoding='utf-8'))

    tidy("index.html")

    # TODO: Repeat for sub directories?

if __name__ == "__main__":
    main()
