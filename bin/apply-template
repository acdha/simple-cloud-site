#!/usr/bin/env python
"""Create or update an HTML file using a template"""

import argparse
import os
import sys
from datetime import datetime, timezone
from warnings import warn

from lxml.html import tostring
from pyquery import PyQuery
from simple_cloud_site.html import Page, parse_html, tidy
from simple_cloud_site.site import load_site


def apply_template(template_file, filename, site, blog_posts=None,
                   update_timestamps=False):
    template = PyQuery(parse_html(template_file).getroot())
    original_post = Page(filename)
    original = PyQuery(original_post.html.getroot())

    template('title,*[itemprop="title"]').removeClass('placeholder').text(original_post.title)

    if update_timstamps:
        now = datetime.now(timezone.utc)

    for i in ('dateCreated', 'dateModified', 'datePublished'):
        j = original('*[itemprop="%s"]' % i)

        if update_timestamps or not j:
            j = now.isoformat()

        # TODO: refactor this into a utility method
        src_val = j.attr('datetime' if j.is_('time') else 'content')
        target = template('*[itemprop="%s"]' % i)
        if target:
            target.attr('datetime' if target.is_('time') else 'content', src_val)

    post_date = original_post.get_publication_date()
    if update_timestamps or not post_date:
        post_date = now

    # TODO: make post date format configurable
    template('time.date').removeClass('placeholder') \
        .text(post_date.strftime('%b %d')) \
        .attr("datetime", post_date.isoformat())

    last_modified = original_post.last_modified
    if update_timestamps or not last_modified:
        last_modified = now

    template('meta[http-equiv="last-modified"]').attr('content',
                                                      last_modified.strftime("%a, %d %b %Y %H:%M:%S GMT"))

    summary = original('.summary').eq(0)
    if summary:
        template('.summary').removeClass('placeholder').empty().html(summary.html())
    else:
        template('.summary').remove()

    template('*[itemprop="articleBody"]').removeClass('placeholder') \
        .empty() \
        .append(original('*[itemprop="articleBody"]').children())

    desc = original_post.description or summary.text()
    if desc:
        template('meta[name="description"]').attr('content', desc)
    else:
        template('meta[name="description"]').remove()

    post_nav = template('#post-nav')
    if not blog_posts:
        post_nav.remove()
    else:
        prev_post = next_post = None

        for post in blog_posts:
            pub_date = post.get_publication_date()

            if pub_date < post_date and (not prev_post or pub_date > prev_post.date_published):
                prev_post = post
            elif pub_date > post_date and (not next_post or pub_date < next_post.date_published):
                next_post = post

        if not prev_post:
            post_nav(".previous").remove()
        else:
            post_nav(".previous").removeClass('placeholder') \
                .attr("href", site.filename_to_url(prev_post.filename)) \
                .text(prev_post.title)

        if not next_post:
            post_nav(".next").remove()
        else:
            post_nav(".next").removeClass('placeholder') \
                .attr("href", site.filename_to_url(next_post.href)) \
                .text(next_post.title)

    orphans = template.find(".placeholder")
    if orphans:
        print("Template contained unexpanded placeholders:", orphans, file=sys.stderr)

    with open(filename, 'wb') as f:
        # We don't use template.outerHtml because that would lose the doctype
        f.write(tostring(template[0].getroottree(), method='html', encoding='utf-8'))

    tidy(filename)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Apply a template to an HTML file')
    parser.add_argument('files', metavar="HTML", nargs="*")
    parser.add_argument('--verbose', '-v', default=False, action="store_true")
    parser.add_argument('--update-timestamps', default=False, action="store_true")
    parser.add_argument('--all-posts', default=False, action="store_true",
                        help='Update all blog posts')
    parser.add_argument('--template', default="_templates/post.html",
                        help='Template filename (default: %(default)s)')
    args = parser.parse_args()

    if not os.path.exists(args.template):
        parser.error("%s does not exist" % args.template)

    site = load_site()
    blog_posts = site.pages.get_blog_posts()

    if not args.all_posts:
        files = args.files
    else:
        files = [i.filename for i in blog_posts]

    for f in files:
        if args.verbose:
            print(f)
        apply_template(args.template, f, site, blog_posts=blog_posts,
                       update_timestamps=args.update_timestamps)
